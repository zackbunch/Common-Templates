# -------------------------------------------------------------------
# Docker Build Template for GitLab CI
#
# This template provides:
#   - Docker-in-Docker build environment
#   - Automatic tagging logic for static or commit-based tags
#   - Optional :latest tagging for release builds
#   - Optional image push to GitLab container registry
#   - Image digest capture to image-digest.env for downstream jobs
#
# Usage:
#   - Extend .build-common in your jobs
#   - Override variables as needed:
#       IMAGE_PATH, IMAGE_ENV_PATH, DOCKERFILE
#       TAG_MODE (versioned|static), TAG_SUFFIX
#       PUSH_IMAGE, TAG_LATEST, RELEASE_IMAGE
#
# Behavior:
#   - Feature branches can build without pushing
#   - Dev or release jobs can push and tag latest
#   - Digest artifact allows deterministic deploys using $IMAGE_DIGEST
# -------------------------------------------------------------------

.build-dind:
  image: docker:24.0.5
  services:
    - name: docker:24.0.5-dind
      alias: docker
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""

.build-common:
  extends: .build-dind
  variables:
    TAG_LATEST: "false"       # Whether to also tag :latest
    PUSH_IMAGE: "false"       # Whether to push the built image
    RELEASE_IMAGE: "false"    # Forces push + latest, requires a Git tag
    TAG_MODE: "versioned"     # "versioned" default or "static"
    TAG_SUFFIX: ""            # Optional suffix like "3.12" for static or multi-version builds
    IMAGE_PATH: "."           # Default build context for single-image builds
    DOCKERFILE: Dockerfile    # Default Dockerfile

  before_script:
    - set -eu
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"

  script:
    - |
      DOCKERFILE="${DOCKERFILE:-Dockerfile}"

      # Determine image tag based on TAG_MODE
      if [ "${TAG_MODE}" = "static" ]; then
        # Static mode: tag is just the suffix (like 3.12)
        IMAGE_TAG="${TAG_SUFFIX:-latest}"
      else
        # Versioned mode: commit-based tag
        if [ "${RELEASE_IMAGE}" = "true" ]; then
          if [ -z "${CI_COMMIT_TAG:-}" ]; then
            echo "RELEASE_IMAGE=true requires a CI_COMMIT_TAG" >&2
            exit 1
          fi
          BASE_TAG="${CI_COMMIT_TAG}"
          PUSH_IMAGE="true"
          TAG_LATEST="true"
        else
          BASE_TAG="${CI_COMMIT_TAG:-$CI_COMMIT_SHORT_SHA}"
        fi

        if [ -n "${TAG_SUFFIX:-}" ] && [ "${TAG_SUFFIX}" != "latest" ]; then
          IMAGE_TAG="${TAG_SUFFIX}-${BASE_TAG}"
        else
          IMAGE_TAG="${BASE_TAG}"
        fi
      fi

      echo "Building $IMAGE_ENV_PATH:$IMAGE_TAG using $IMAGE_PATH/$DOCKERFILE"

      # Build using explicit context instead of cd
      docker build --pull \
        -f "$IMAGE_PATH/$DOCKERFILE" \
        -t "$IMAGE_ENV_PATH:$IMAGE_TAG" \
        "$IMAGE_PATH"

      # Optionally tag latest
      if [ "${TAG_LATEST}" = "true" ]; then
        docker tag "$IMAGE_ENV_PATH:$IMAGE_TAG" "$IMAGE_ENV_PATH:latest"
      fi

      # Push if enabled
      if [ "${PUSH_IMAGE}" = "true" ]; then
        docker push "$IMAGE_ENV_PATH:$IMAGE_TAG"
        [ "${TAG_LATEST}" = "true" ] && docker push "$IMAGE_ENV_PATH:latest"

        DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' "$IMAGE_ENV_PATH:$IMAGE_TAG" || true)
        DIGEST="${DIGEST#*@}"
        # Always write the digest to the project root for GitLab artifacts
        echo "IMAGE_DIGEST=${DIGEST:-skipped}" > "$CI_PROJECT_DIR/image-digest.env"
      else
        echo "IMAGE_DIGEST=skipped" > "$CI_PROJECT_DIR/image-digest.env"
      fi

  artifacts:
    reports:
      dotenv: image-digest.env
    paths:
      - image-digest.env