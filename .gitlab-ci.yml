include:
  - local: '.ci-templates/docker.gitlab-ci.yml'
  - local: '.ci-templates/secrets-analyzer.gitlab-ci.yml'

stages:
  - build
  - scan
  - release

# -----------------------------------------------------------
# Feature branch build
# -----------------------------------------------------------
build_feature:
  stage: build
  extends: [".build-common"]
  variables:
    IMAGE_ENV_PATH: "$CI_REGISTRY_IMAGE/app"  # e.g., registry.example.com/group/project/app
    RELEASE_IMAGE: "false"   # CRITICAL: Never push feature builds
    TAG_SUFFIX: ""           # No suffix for feature branches
  rules:
    - if: $CI_COMMIT_BRANCH =~ /^gmarm-/

# ---------------------------
# Build & push for dev branch
# ---------------------------
build_dev:
  stage: build
  extends: .build-common
  variables:
    # override per-service as needed
    IMAGE_ENV_PATH: "$CI_REGISTRY_IMAGE/python"
    TAG_SUFFIX: "dev"        # dev-a1b2c3d
    PUSH_IMAGE: "true"       # push so dev cluster can pull it
    TAG_LATEST: "false"      # don't pollute :latest
    RELEASE_IMAGE: "false"
  rules:
    - if: '$CI_COMMIT_BRANCH == "dev"'
  # image-digest.env is already exported by .build-common as dotenv + artifact


container_scan_dev:
  stage: scan
  image: alpine:3.20
  needs:
    - job: build_dev
      artifacts: true
  rules:
    - if: '$CI_COMMIT_BRANCH == "dev"'
  script: |
    set -euo pipefail
    echo "=== Container scan (dev) ==="

    # Show tag form
    echo "Tag ref: ${IMAGE_ENV_PATH}:${IMAGE_TAG}"

    # Show digest form (immutable) if available
    if [ -n "${IMAGE_DIGEST:-}" ] && [ "${IMAGE_DIGEST}" != "skipped" ]; then
      echo "Digest ref:  ${IMAGE_ENV_PATH}@sha256:${IMAGE_DIGEST}"
    else
      echo "Digest ref:  unavailable (no push or digest not resolved)"
    fi



release:publish:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: '$CI_COMMIT_TAG'      # only when you push a tag
  script:
    - echo "Creating GitLab Release for $CI_COMMIT_TAG"
  release:
    tag_name: "$CI_COMMIT_TAG"
    name: "Release $CI_COMMIT_TAG"
    description: "Automated release from pipeline"
    # optional assets (point to job artifacts, package URLs, etc.)
    assets:
      links:
        - name: "artifact.tar.gz"
          url: "${CI_PROJECT_URL}/-/jobs/${CI_JOB_ID}/artifacts/download"

