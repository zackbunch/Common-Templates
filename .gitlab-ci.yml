include:
  - local: '.gitlab/job-rules.gitlab-ci.yml'
  - local: '.gitlab/secrets.gitlab-ci.yml'
  - local: '.gitlab/container-scan.gitlab-ci.yml'
  - local: '.gitlab/docker.gitlab-ci.yml'
  - local: '.gitlab/deploy.gitlab-ci.yml'
  # - local: '.gitlab/release.gitlab-ci.yml'


stages: [prepare, build, scan, deploy, release]



variables:
  APP_NAME: templates
  PUSH_ON_FEATURE: "false"


# ---------------------------
# Build
# ---------------------------
build:docker:
  stage: build
  interruptible: true
  extends: .build-common
  rules: !reference [.rule:build-simple, rules]


release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  variables:
    GIT_DEPTH: "0"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == "dev"'
      when: always
    - when: never
  before_script:
    - set -euo pipefail
    - git fetch --tags --force
    - git fetch origin "+${CI_COMMIT_REF_NAME}:${CI_COMMIT_REF_NAME}" || true
    - git checkout -q "${CI_COMMIT_REF_NAME}"
  script: |
    set -euo pipefail

    # Get latest semver tag (strip leading v if someone pushed one)
    LATEST_TAG="$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")"
    LATEST_TAG="${LATEST_TAG#v}"

    if ! echo "$LATEST_TAG" | grep -Eq '^[0-9]+\.[0-9]+\.[0-9]+$'; then
      echo "LATEST_TAG not semver, defaulting to 0.0.0"
      LATEST_TAG="0.0.0"
    fi

    IFS=. read -r MAJOR MINOR PATCH <<<"$LATEST_TAG"

    # Gather commits since last tag (if any)
    if git rev-parse -q --verify "refs/tags/${LATEST_TAG}" >/dev/null 2>&1; then
      RANGE="${LATEST_TAG}..${CI_COMMIT_SHA}"
    else
      RANGE="${CI_COMMIT_SHA}"
    fi
    COMMITS="$(git log --format=%s ${RANGE} || true)"

    # Default bump = patch
    BUMP="patch"

    if echo "$COMMITS" | grep -Eiq 'breaking change|!:'; then
      BUMP="major"
    elif echo "$COMMITS" | grep -Eiq '(^|[^a-z])feat([^a-z]|$)'; then
      BUMP="minor"
    fi

    case "$BUMP" in
      major) MAJOR=$((MAJOR+1)); MINOR=0; PATCH=0 ;;
      minor) MINOR=$((MINOR+1)); PATCH=0 ;;
      patch) PATCH=$((PATCH+1)) ;;
    esac

    NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
    echo "LATEST_TAG=$LATEST_TAG"
    echo "NEW_VERSION=$NEW_VERSION"
    echo "BUMP=$BUMP"

    # Only create release if version changed
    if [ "$NEW_VERSION" != "$LATEST_TAG" ]; then
      release-cli create \
        --tag-name "$NEW_VERSION" \
        --ref "$CI_COMMIT_SHA" \
        --description "Release $NEW_VERSION from ${CI_PROJECT_PATH}@${CI_COMMIT_SHORT_SHA}"
    else
      echo "No version change; skipping release creation."
    fi
  artifacts:
    reports:
      dotenv: variables.env
