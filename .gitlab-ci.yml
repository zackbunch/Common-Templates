# .gitlab-ci.yml

workflow:
  rules:
    # Release tags → repo at project root, tag = semver
    - if: '$CI_COMMIT_TAG'
      variables:
        CI_APPLICATION_REPOSITORY: '$CI_REGISTRY_IMAGE'
        CI_APPLICATION_TAG: '$CI_COMMIT_TAG'

    # gmarm-* feature stream → fixed subpath, tag latest
    - if: '$CI_COMMIT_BRANCH =~ /^gmarm-[A-Za-z0-9._-]+$/'
      variables:
        CI_APPLICATION_REPOSITORY: '$CI_REGISTRY_IMAGE/gmarm'
        CI_APPLICATION_TAG: 'latest'

    # env branches → per-branch subpath, tag latest
    - if: '$CI_COMMIT_BRANCH =~ /\b(dev|test|int|main|master)\b/'
      variables:
        CI_APPLICATION_REPOSITORY: '$CI_REGISTRY_IMAGE/$CI_COMMIT_BRANCH'
        CI_APPLICATION_TAG: 'latest'

    # Always run for MRs (so the pipeline exists even if above didn’t match)
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: always

    # Fallback: always create a pipeline
    - when: always

include:
  - local: /.gitlab/templates/rules.gitlab-ci.yml
  - local: /.gitlab/templates/docker.gitlab-ci.yml
  - local: /.gitlab/templates/build.gitlab-ci.yml
  - local: /.gitlab/templates/secrets.gitlab-ci.yml
  - local: /.gitlab/templates/container-scan.gitlab-ci.yml
  - local: /.gitlab/templates/release.gitlab-ci.yml


stages: [build, scan, release, deploy]

default:
  interruptible: true
  tags:
    - dock_exec_bash

variables:
  SPRINT: 125
  BUILD_ARGS: |
    SERVER_URL=${CI_SERVER_URL}
    CI_REGISTRY=${CI_REGISTRY}
    TOKEN_TYPE=JOB
    GITLAB_TOKEN=${CI_JOB_TOKEN}


