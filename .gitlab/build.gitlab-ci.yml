# This file contains templates for building and pushing Docker images.
#
# The templates are designed to be reusable and configurable for different
# scenarios, such as building feature branches, merge requests, and releases.
#
# The following variables can be set to change the functionality of the
# templates:
#
#   - APP_NAME: The name of the application. This is used to construct the
#     image name.
#   - DOCKER_CONTEXT: The context to use for the Docker build. Defaults to ".".
#   - DOCKERFILE: The path to the Dockerfile. Defaults to "Dockerfile".
#   - PUSH_IMAGE: Whether to push the image to the registry. Defaults to "false".
#   - RELEASE_IMAGE: Whether this is a release build. Defaults to "false".
#   - TAG_LATEST: Whether to tag the image with "latest". Defaults to "false".
#   - TAG_SUFFIX: A suffix to add to the image tag.
#   - AUTO_PUSH: Whether to automatically push the image for certain branches
#     and tags. Defaults to "true".
#   - PUSH_ON_FEATURE: Whether to push the image for feature branches. Defaults
#     to "false".
#
# .gitlab/docker.gitlab-ci.yml
.build-dind:
  image: docker:24.0.5
  services: [ "docker:24.0.5-dind" ]
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""


.build_image_template:
  extends: .build-dind
  variables:
    # Overridables
    APP_NAME: ""
    DOCKER_CONTEXT: "."
    DOCKERFILE: "Dockerfile"     # default to Dockerfile

    # Push policy
    PUSH_IMAGE: "false"          # auto-true for tags/env branches if you set AUTO_PUSH=true
    AUTO_PUSH: "true"            # enable default push for tags/dev/test/int/prod
    PUSH_ON_FEATURE: "false"     # allow feature branch pushes

    # Suffix presets
    FEATURE_PREFIX: "gmarm-"
    DEV_TAG_SUFFIX: "dev"
    TEST_TAG_SUFFIX: "test"
    INT_TAG_SUFFIX:  "int"
    PROD_TAG_SUFFIX: "prod"
    FEATURE_TAG_SUFFIX: "feat"
    MR_TAG_SUFFIX: "mr"

    # Latest tag behavior
    TAG_LATEST: "false"          # weâ€™ll also set true for prod or tag pipelines

  script:
    - set -euo pipefail

    # ---------- Normalize inputs (CI-only) ----------
    - 'DOCKERFILE="${DOCKERFILE:-Dockerfile}"'
    - 'DOCKER_CONTEXT="${DOCKER_CONTEXT:-.}"'
    - 'SRC_BRANCH="${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME:-${CI_COMMIT_BRANCH:-}}"'  # MR-safe

    # ---------- Repo path ----------
    - |
      if [[ -n "${APP_NAME:-}" ]]; then
        APP_NAME="$(printf '%s' "${APP_NAME}" | tr '[:upper:] ' '[:lower:]-' | tr -cd 'a-z0-9._-')"
        [[ -n "${APP_NAME}" ]] || { echo "bad APP_NAME"; exit 1; }
      fi
      if [[ -n "${CI_COMMIT_TAG:-}" ]]; then
        IMAGE_REPO="${CI_REGISTRY_IMAGE}/releases${APP_NAME:+/${APP_NAME}}"
      else
        IMAGE_REPO="${CI_REGISTRY_IMAGE}${APP_NAME:+/${APP_NAME}}"
      fi

    # ---------- Base tag ----------
    - |
      if [[ -n "${CI_COMMIT_TAG:-}" ]]; then
        BASE_TAG="${CI_COMMIT_TAG}"
        IS_TAG_PIPE="1"
      else
        BASE_TAG="${CI_COMMIT_SHORT_SHA:-dev}"
        IS_TAG_PIPE=""
      fi

    # ---------- Auto suffix (overridable by TAG_SUFFIX) ----------
    - |
      case "${CI_PIPELINE_SOURCE:-}:${SRC_BRANCH:-}" in
        merge_request_event:*) TAG_SUFFIX="${TAG_SUFFIX:-${MR_TAG_SUFFIX}}" ;;
        *:dev)                 TAG_SUFFIX="${TAG_SUFFIX:-${DEV_TAG_SUFFIX}}" ;;
        *:test)                TAG_SUFFIX="${TAG_SUFFIX:-${TEST_TAG_SUFFIX}}" ;;
        *:int)                 TAG_SUFFIX="${TAG_SUFFIX:-${INT_TAG_SUFFIX}}" ;;
        *:prod)                TAG_SUFFIX="${TAG_SUFFIX:-${PROD_TAG_SUFFIX}}"; TAG_LATEST="${TAG_LATEST:-true}" ;;
        *:${FEATURE_PREFIX}*)  TAG_SUFFIX="${TAG_SUFFIX:-${FEATURE_TAG_SUFFIX}}" ;;
        *) : ;;
      esac
      [[ "${TAG_SUFFIX:-}" != "latest" ]] || { echo "TAG_SUFFIX cannot be 'latest'"; exit 1; }
      IMAGE_TAG="${TAG_SUFFIX:+${TAG_SUFFIX}-}${BASE_TAG}"
      IMAGE_TAG="$(printf '%s' "${IMAGE_TAG}" | tr ' /' '--' | tr -cd '[:alnum:]._-')"

    # ---------- Auto push (CI-only logic) ----------
    - |
      if [[ "${AUTO_PUSH}" == "true" && "${PUSH_IMAGE}" != "true" ]]; then
        case "${SRC_BRANCH:-}" in
          dev|test|int|prod) PUSH_IMAGE="true" ;;
          *)
            if [[ -n "${IS_TAG_PIPE}" ]]; then
              PUSH_IMAGE="true"
            elif [[ "${PUSH_ON_FEATURE}" == "true" && "${SRC_BRANCH:-}" == ${FEATURE_PREFIX}* ]]; then
              PUSH_IMAGE="true"
            else
              PUSH_IMAGE="false"
            fi
          ;;
        esac
      fi

    # ---------- Build ----------
    - |
      echo "Building ${IMAGE_REPO}:${IMAGE_TAG} using ${DOCKERFILE} (context: ${DOCKER_CONTEXT})"
      docker build --pull \
        -f "${DOCKERFILE}" \
        --label "org.opencontainers.image.source=${CI_PROJECT_URL:-}" \
        --label "org.opencontainers.image.revision=${CI_COMMIT_SHA:-}" \
        --label "org.opencontainers.image.created=$(date -u +%FT%TZ)" \
        --label "org.opencontainers.image.ref.name=${CI_COMMIT_REF_NAME:-}" \
        --build-arg TOKEN_TYPE="JOB" \
        --build-arg GITLAB_TOKEN="${CI_JOB_TOKEN}" \
        --build-arg CI_PROJECT_ID="${CI_PROJECT_ID}" \
        --build-arg CI_SERVER_URL="${CI_SERVER_URL}" \
        -t "${IMAGE_REPO}:${IMAGE_TAG}" \
        "${DOCKER_CONTEXT}"

    # Tag latest for prod branch or tag pipeline, or if explicitly requested
    - |
      if [[ "${TAG_LATEST}" == "true" || -n "${IS_TAG_PIPE:-}" ]]; then
        docker tag "${IMAGE_REPO}:${IMAGE_TAG}" "${IMAGE_REPO}:latest"
      fi

    # ---------- Push (CI registry only) ----------
    - |
      if [[ "${PUSH_IMAGE}" == "true" ]]; then
        echo "Login ${CI_REGISTRY} as ${CI_REGISTRY_USER}"
        docker login -u "${CI_REGISTRY_USER}" -p "${CI_JOB_TOKEN}" "${CI_REGISTRY}"
        echo "Pushing ${IMAGE_REPO}:${IMAGE_TAG}"
        docker push "${IMAGE_REPO}:${IMAGE_TAG}"
        if [[ "${TAG_LATEST}" == "true" || -n "${IS_TAG_PIPE:-}" ]]; then
          docker push "${IMAGE_REPO}:latest"
        fi
        DIGEST="$(docker inspect --format='{{index .RepoDigests 0}}' "${IMAGE_REPO}:${IMAGE_TAG}" || true)"
      else
        DIGEST=""
      fi

    # ---------- Dotenv for downstream jobs ----------
    - |
      {
        echo "IMAGE_ENV_PATH=${IMAGE_REPO}"
        echo "IMAGE_TAG=${IMAGE_TAG}"
        echo "IMAGE_REF=${DIGEST:-skipped}"
        echo "IMAGE_DIGEST=${DIGEST#*@sha256:}"
      } > image-digest.env
  artifacts:
    reports:
      dotenv: image-digest.env
    paths:
      - image-digest.env
    when: always
    expire_in: 1 week
