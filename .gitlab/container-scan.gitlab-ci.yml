# Container Scanning (digest-aware, POSIX-sh safe)
variables:
  CS_ANALYZER_IMAGE: "$CI_TEMPLATE_REGISTRY_HOST/security-products/container-scanning:8"
  CS_SCHEMA_MODEL: 15

scan:container:
  image: "$CS_ANALYZER_IMAGE"
  stage: scan
  needs:
    - job: build:docker
      artifacts: true
      optional: true
  allow_failure: true            # gate or not: flip to false if you want blocking
  variables:
    GIT_STRATEGY: none
    CS_REGISTRY: "$CI_REGISTRY"
    CS_REGISTRY_USER: "$CI_REGISTRY_USER"     # analyzer will auth to pull
    CS_REGISTRY_PASSWORD: "$CI_JOB_TOKEN"     # with gitlab-ci-token
    CS_SCHEMA_MODEL: 15
    # CS_SEVERITY_THRESHOLD: "low"            # uncomment to gate by severity
  before_script:
    - set -eu
    - |
      # Require IMAGE_REF from build (repo@sha256:...)
      if [ -z "${IMAGE_REF:-}" ] || [ "${IMAGE_REF}" = "skipped" ]; then
        echo "No IMAGE_REF provided by build:docker; skipping scan."
        exit 0
      fi
      export CS_IMAGE="${IMAGE_REF}"
      # Optional: show the human tag ref if present
      if [ -n "${DOCKER_IMAGE_WITH_TAG:-}" ]; then
        echo "Scanning image: ${DOCKER_IMAGE_WITH_TAG}"
      fi
      echo "Using digest ref: ${CS_IMAGE}"
  script:
    - /analyzer run
  rules: !reference [.rule:scan-on-mr-or-manual, rules]
  artifacts:
    access: developer
    reports:
      container_scanning: gl-container-scanning-report.json
      cyclonedx: "**/gl-sbom-*.cdx.json"
    paths:
      - gl-container-scanning-report.json
      - "**/gl-sbom-*.cdx.json"