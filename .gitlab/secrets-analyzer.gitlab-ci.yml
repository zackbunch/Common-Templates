# .gitlab/secrets.gitlab-ci.yml
# ---------------------------------------------------------------------------
# Secret Detection Template for GitLab CI
# - Runs only on MRs targeting dev|test|int|main (rule is referenced)
# - Fails the job if any secrets are detected (no jq needed)
# - Produces a GitLab-native secret_detection report
# ---------------------------------------------------------------------------

include:
  - local: '.gitlab/job-rules.gitlab-ci.yml'   # must define .rule:scan-on-mr-to-env

# Hidden base (so projects can `extends:` if they want to tweak variables)
.secret-analyzer: &secret_analyzer_base
  stage: scan
  image: registry.gitlab.com/gitlab-org/security-products/analyzers/secrets:latest
  services: []
  variables:
    # Fetch enough history for MR comparisons; set to "0" for full history if you prefer.
    GIT_DEPTH: "25"

    # Optional: comma-separated paths to ignore, e.g. "docs/,samples/"
    SECRET_DETECTION_EXCLUDED_PATHS: ""

    # Scan only the MR range, not repo history.
    SECRET_DETECTION_HISTORIC_SCAN: "false"

    # Critical: non-zero exit when findings exist (gates the MR).
    SECURE_ANALYZERS_FORCE_EXIT_CODE: "1"
  allow_failure: false
  script:
    - /analyzer run
  artifacts:
    when: always
    expire_in: 1 week
    reports:
      secret_detection: gl-secret-detection-report.json

# Public job name you can reference directly in pipelines
secrets_scan:
  <<: *secret_analyzer_base
  rules: !reference [.rule:scan-on-mr-to-env, rules]