# .ci-templates/release.yml
#
# Usage:
#  1) include this file
#  2) ensure tag rules exist OR rely on the fallback rule here
#  3) downstream can `needs: ["release:version"]` to read $VERSION

.rule:tag-only:
  rules:
    - if: '$CI_COMMIT_TAG'
    - when: never

.release-cli: &release-cli
  image: registry.gitlab.com/gitlab-org/release-cli:v0.16.0
  before_script:
    - set -euo pipefail
    - release-cli --version

release:version:
  image: alpine:3.20
  stage: release
  rules: !reference [.rule:tag-only, rules]
  interruptible: true
  retry:
    max: 1
    when: runner_system_failure
  variables:
    ENFORCE_SEMVER: "false"     # set to "true" to validate tag formatting
    ALLOW_V_PREFIX: "true"      # accept v1.2.3 if desired
    REQUIRE_PROTECTED_TAG: "false"
    ARTIFACT_NAME: "VERSION-$CI_COMMIT_TAG"
  before_script:
    - set -euo pipefail
  script:
    - |
      if [ -z "${CI_COMMIT_TAG:-}" ]; then
        echo "ERROR: Not running on a tag"; exit 1
      fi
    - |
      if [ "${REQUIRE_PROTECTED_TAG}" = "true" ] && [ "${CI_COMMIT_REF_PROTECTED:-false}" != "true" ]; then
        echo "ERROR: Tag '${CI_COMMIT_TAG}' is not protected"; exit 1
      fi
    - |
      if [ "${ENFORCE_SEMVER}" = "true" ]; then
        if [ "${ALLOW_V_PREFIX}" = "true" ]; then
          SEMVER_RE='^v?([0-9]+)\.([0-9]+)\.([0-9]+)(-[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?(\+[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?$'
        else
          SEMVER_RE='^([0-9]+)\.([0-9]+)\.([0-9]+)(-[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?(\+[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?$'
        fi
        if ! printf '%s' "$CI_COMMIT_TAG" | grep -Eq "$SEMVER_RE"; then
          echo "ERROR: tag '$CI_COMMIT_TAG' is not valid SemVer 2.0"; exit 1
        fi
      fi
    - printf '%s\n' "$CI_COMMIT_TAG" > VERSION
    - printf 'VERSION=%s\n' "$CI_COMMIT_TAG" > version.env
    - echo "Set VERSION=$CI_COMMIT_TAG"
  artifacts:
    name: "$ARTIFACT_NAME"
    expose_as: "VERSION"
    paths: [VERSION]
    reports:
      dotenv: version.env
    when: always
    expire_in: 1 week

release:create:
  extends: .release-cli
  stage: release
  rules: !reference [.rule:tag-only, rules]
  interruptible: true
  needs:
    - job: build:docker         # adjust to your build job name
      artifacts: true
      optional: true
    - job: release:version
      artifacts: true
  variables:
    RELEASE_NOTES_FILE: "RELEASE_NOTES.md"
  before_script:
    - set -euo pipefail
    - IMAGE="(not available)"
    - VERSION_STR="${CI_COMMIT_TAG:-unknown}"
    # If present, pick up image ref (e.g., from your build pushing a digest)
    - if [ -f image-digest.env ]; then . image-digest.env; IMAGE="${IMAGE_REF:-$IMAGE}"; fi
    - if [ -f version.env ]; then . version.env; VERSION_STR="${VERSION:-$VERSION_STR}"; fi
    - |
      {
        printf 'Release %s\n\n' "$CI_COMMIT_TAG"
        printf 'Version:  %s\n' "$VERSION_STR"
        printf 'Pipeline: %s\n' "$CI_PIPELINE_URL"
        printf 'Commit:   %s/-/commit/%s\n\n' "$CI_PROJECT_URL" "$CI_COMMIT_SHA"
        printf 'Image:\n`%s`\n' "$IMAGE"
      } > "$RELEASE_NOTES_FILE"
    # Escape for safe passing to --description
    - DESCRIPTION_ESCAPED="$(sed -e 's/"/\\"/g' "$RELEASE_NOTES_FILE")"
    # Optional: be idempotent â€” if release exists, update instead of failing
    - |
      set +e
      release-cli list --per-page 20 >/dev/null 2>&1
      LIST_RC=$?
      set -e
      if [ $LIST_RC -ne 0 ]; then
        echo "NOTE: release-cli list unsupported in this version; proceeding to create"
        ACTION="create"
      else
        if release-cli list --per-page 100 | grep -Fq "tag_name: ${CI_COMMIT_TAG}"; then
          ACTION="update"
        else
          ACTION="create"
        fi
      fi
    - echo "Using release action $ACTION"
  script:
    - |
      if [ "$ACTION" = "update" ]; then
        release-cli update \
          --name "Release ${CI_COMMIT_TAG}" \
          --tag-name "${CI_COMMIT_TAG}" \
          --description "$DESCRIPTION_ESCAPED"
      else
        release-cli create \
          --name "Release ${CI_COMMIT_TAG}" \
          --tag-name "${CI_COMMIT_TAG}" \
          --description "$DESCRIPTION_ESCAPED"
      fi
    # Optionally attach an asset link for the image reference if you have a view URL
    # - release-cli asset link create --name "Container Image" --url "$IMAGE_URL" --tag-name "$CI_COMMIT_TAG"
