# .ci-templates/release.yml
#
# How to use
# 1) include this file
# 2) ensure a tag-only rules anchor exists: `.rule:tag-only`
# 3) downstream jobs can `needs: [release:version]` to get $VERSION

release:version:
  image: alpine:3.20
  stage: release
  rules: !reference [.rule:tag-only, rules]
  variables:
    ENFORCE_SEMVER: "false"
  before_script:
    - set -euo pipefail
  script:
    - |
      if [ -z "${CI_COMMIT_TAG:-}" ]; then
        echo "ERROR: Not running on a tag"; exit 1
      fi
    - |
      if [ "${ENFORCE_SEMVER}" = "true" ]; then
        case "${CI_COMMIT_TAG}" in
          ([0-9]*.[0-9]*.[0-9]*|[0-9]*.[0-9]*.[0-9]*-*) : ;;
          (*) echo "ERROR: tag '${CI_COMMIT_TAG}' is not SemVer"; exit 1 ;;
        esac
      fi
    - echo "${CI_COMMIT_TAG}" > VERSION
    - printf 'VERSION=%s\n' "${CI_COMMIT_TAG}" > version.env
  artifacts:
    expose_as: "VERSION"
    paths: [VERSION]
    reports:
      dotenv: version.env
    when: always
    expire_in: 1 week

# New release job using GitLab CLI (glab)
release:create:
  stage: release
  image: registry.gitlab.com/gitlab-org/cli:latest
  rules: !reference [.rule:tag-only, rules]
  needs:
    - job: build:docker
      artifacts: true
      optional: true
    - job: release:version
      artifacts: true
      optional: true
  variables:
    # Optional: space-separated paths to asset files to upload with the release
    # Example: "dist/app-linux-amd64.tar.gz dist/app-darwin-arm64.zip"
    ASSET_PATHS: ""
  before_script:
    - set -euo pipefail
    # glab auth: prefer a dedicated token if provided; otherwise fall back to CI_JOB_TOKEN (works on most self-hosted GitLab instances)
    - export GITLAB_TOKEN="${GITLAB_TOKEN:-${GLAB_TOKEN:-${CI_JOB_TOKEN:-}}}"
    - export GLAB_HOST="${GLAB_HOST:-${CI_SERVER_HOST:-}}"
    - glab --version
    - NOTES=RELEASE_NOTES.md
    - IMAGE="(not available)"
    - VERSION_STR="${CI_COMMIT_TAG:-unknown}"
    - if [ -f image-digest.env ]; then . image-digest.env; IMAGE="${IMAGE_REF:-$IMAGE}"; fi
    - if [ -f version.env ]; then . version.env; VERSION_STR="${VERSION:-$VERSION_STR}"; fi
    - |
      {
        echo "Release ${CI_COMMIT_TAG}"
        echo
        echo "Version:  ${VERSION_STR}"
        echo "Pipeline: ${CI_PIPELINE_URL}"
        echo "Commit:   ${CI_PROJECT_URL}/-/commit/${CI_COMMIT_SHA}"
        echo
        echo "Image:"
        echo "\`${IMAGE}\`"
      } > "${NOTES}"
  script:
    - |
      set -euo pipefail
      set -- "${CI_COMMIT_TAG}" \
        --name "Release ${VERSION_STR}" \
        --notes-file "${NOTES}"

      # Optional assets (space-separated in ASSET_PATHS)
      if [ -n "${ASSET_PATHS}" ]; then
        for f in ${ASSET_PATHS}; do
          if [ -f "$f" ]; then
            set -- "$@" --assets-link "name=$(basename "$f"),link_type=package,path=file://$PWD/$f"
          else
            echo "WARN: asset '$f' not found; skipping" >&2
          fi
        done
      fi

      echo "Running: glab release create [args elided]"
      glab release create "$@"
