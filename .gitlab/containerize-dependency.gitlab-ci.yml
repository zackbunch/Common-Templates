variables:
  DOCKER_TLS_CERTDIR: ""
  DOCKER_BUILDKIT: "1"
  CI_APPLICATION_TAG: ""
  PUSH_LATEST: "false"

.before_docker: &before_docker
  - set -euo pipefail
  - echo "$CI_JOB_TOKEN" | docker login -u gitlab-ci-token --password-stdin "$CI_REGISTRY"

.compute_meta: &compute_meta | 
  set -euo pipefail

  BASE_IMAGE_PATH="$CI_REGISTRY_IMAGE"
  if [ -n "${APP_NAME:-}" ]; then
    BASE_IMAGE_PATH="${BASE_IMAGE_PATH}/${APP_NAME}"
  fi

  TAG_SRC="${CI_APPLICATION_TAG:-${CI_COMMIT_TAG:-}}"
  if [ -z "$TAG_SRC" ]; then
    echo "CI_APPLICATION_TAG is empty and CI_COMMIT_TAG not present; refuse to build." >&2
    exit 2
  fi

  IMAGE_TAG="$(printf '%s' "$TAG_SRC" | tr '[:upper:]' '[:lower:]' | sed -E 's/[^a-z0-9_.-]+/-/g')"

  DOCKER_IMAGE_REPO="$BASE_IMAGE_PATH"
  DOCKER_IMAGE_WITH_TAG="${BASE_IMAGE_PATH}:${IMAGE_TAG}"
  DOCKER_IMAGE_LATEST="${BASE_IMAGE_PATH}:latest"

  # Only publish :latest if explicitly enabled
  PUBLISH_LATEST="$PUSH_LATEST"

  {
    echo "DOCKER_IMAGE_REPO=$DOCKER_IMAGE_REPO"
    echo "DOCKER_IMAGE_WITH_TAG=$DOCKER_IMAGE_WITH_TAG"
    echo "DOCKER_IMAGE_LATEST=$DOCKER_IMAGE_LATEST"
    echo "IMAGE_TAG=$IMAGE_TAG"
    echo "PUBLISH_LATEST=$PUBLISH_LATEST"
  } > docker.env

build:docker:
  image: docker:24-cli
  stage: build
  services:
    - name: docker:24-dind
      alias: docker
  before_script:
    - *before_docker
    - *compute_meta
    - docker buildx inspect default >/dev/null 2>&1 || docker buildx create --name default --use
  script: |
    set -euo pipefail

    docker buildx build \
      --push \
      --secret id=gitlab_token,env=CI_JOB_TOKEN \
      --build-arg CI_REGISTRY="$CI_REGISTRY" \
      --build-arg CI_API_V4_URL="$CI_API_V4_URL" \
      --build-arg CI_PROJECT_ID="$CI_PROJECT_ID" \
      -t "$DOCKER_IMAGE_WITH_TAG" \
      $( [ "$PUBLISH_LATEST" = "true" ] && printf -- '-t %s ' "$DOCKER_IMAGE_LATEST" ) \
      .

    # Correct digest lookup for a pushed image
    DIGEST="$(docker buildx imagetools inspect "$DOCKER_IMAGE_WITH_TAG" | grep 'Digest:' | awk '{print $2}' | tr -d '\n')"
    IMAGE_REF="$DOCKER_IMAGE_REPO@$DIGEST"
    {
      echo "IMAGE_REF=$IMAGE_REF"
      echo "IMAGE_DIGEST=$DIGEST"
      echo "CS_IMAGE=$IMAGE_REF"
    } >> docker.env
  artifacts:
    reports: { dotenv: docker.env }
    paths: [docker.env]
    expire_in: 30 days
