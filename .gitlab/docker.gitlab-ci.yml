# .gitlab/build.gitlab-ci.yml
.build-dind:
  image: docker:24.0.5
  services: [ "docker:24.0.5-dind" ]
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""

.build-common:
  extends: .build-dind
  variables:
    PUSH_IMAGE: "false"
    RELEASE_IMAGE: "false"
    TAG_LATEST: "false"
    TAG_SUFFIX: ""
    DOCKER_CONTEXT: "."
    DOCKERFILE: "Dockerfile"
  before_script:
    - set -euo pipefail
    - echo "Login $CI_REGISTRY as $CI_REGISTRY_USER"
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_JOB_TOKEN" "$CI_REGISTRY"
  script: |
    set -euo pipefail

    # Image path: use project path; append /APP_NAME only if provided
    IMAGE_REPO="${CI_REGISTRY_IMAGE}"
    if [ -n "${APP_NAME:-}" ]; then
      # sanitize app name
      APP_NAME="$(printf '%s' "${APP_NAME}" | tr '[:upper:] ' '[:lower:]-' | tr -cd 'a-z0-9._-')"
      [ -n "${APP_NAME}" ] || { echo "bad APP_NAME"; exit 1; }
      IMAGE_REPO="${IMAGE_REPO}/${APP_NAME}"
    fi

    # Tag value
    if [ "${RELEASE_IMAGE}" = "true" ]; then
      [ -n "${CI_COMMIT_TAG:-}" ] || { echo "RELEASE_IMAGE requires CI_COMMIT_TAG"; exit 1; }
      BASE_TAG="${CI_COMMIT_TAG}"
      # default to push on release if not already set by rules
      [ "${PUSH_IMAGE}" = "true" ] || PUSH_IMAGE="true"
    else
      BASE_TAG="${CI_COMMIT_SHORT_SHA}"
    fi

    # Suffix and sanitize
    [ "${TAG_SUFFIX}" != "latest" ] || { echo "TAG_SUFFIX cannot be 'latest'"; exit 1; }
    IMAGE_TAG="${TAG_SUFFIX:+${TAG_SUFFIX}-}${BASE_TAG}"
    IMAGE_TAG="$(printf '%s' "${IMAGE_TAG}" | tr ' /' '--' | tr -cd '[:alnum:]._-')"

    echo "---- build flags ----"
    echo "DEBUG_REASON     : ${DEBUG_REASON:-unset}"
    echo "PIPELINE_SOURCE  : ${CI_PIPELINE_SOURCE:-}"
    echo "BRANCH           : ${CI_COMMIT_BRANCH:-}"
    echo "TAG              : ${CI_COMMIT_TAG:-}"
    echo "PUSH_ON_FEATURE  : ${PUSH_ON_FEATURE:-unset}"
    echo "PUSH_IMAGE       : ${PUSH_IMAGE}"
    echo "RELEASE_IMAGE    : ${RELEASE_IMAGE}"
    echo "TAG_SUFFIX       : ${TAG_SUFFIX}"
    echo "TAG_LATEST       : ${TAG_LATEST}"
    echo "IMAGE_REPO       : ${IMAGE_REPO}"
    echo "IMAGE_TAG        : ${IMAGE_TAG}"
    echo "---------------------"

    docker build --pull -f "${DOCKERFILE}" \
      --label "org.opencontainers.image.source=${CI_PROJECT_URL:-}" \
      --label "org.opencontainers.image.revision=${CI_COMMIT_SHA:-}" \
      --label "org.opencontainers.image.created=$(date -u +%FT%TZ)" \
      --label "org.opencontainers.image.ref.name=${CI_COMMIT_REF_NAME:-}" \
      -t "${IMAGE_REPO}:${IMAGE_TAG}" "${DOCKER_CONTEXT}"

    if [ "${TAG_LATEST}" = "true" ]; then
      docker tag "${IMAGE_REPO}:${IMAGE_TAG}" "${IMAGE_REPO}:latest"
    fi

    if [ "${PUSH_IMAGE}" = "true" ]; then
      echo "Pushing ${IMAGE_REPO}:${IMAGE_TAG}"
      docker push "${IMAGE_REPO}:${IMAGE_TAG}"
      if [ "${TAG_LATEST}" = "true" ]; then
        docker push "${IMAGE_REPO}:latest"
      fi
      DIGEST="$(docker inspect --format='{{index .RepoDigests 0}}' "${IMAGE_REPO}:${IMAGE_TAG}" || true)"
    else
      echo "Skipping push (PUSH_IMAGE=false)"
      DIGEST=""
    fi

    {
      echo "IMAGE_ENV_PATH=${IMAGE_REPO}"
      echo "IMAGE_TAG=${IMAGE_TAG}"
      echo "IMAGE_REF=${DIGEST:-skipped}"
      echo "IMAGE_DIGEST=${DIGEST#*@sha256:}"
    } > image-digest.env
  artifacts:
    reports: { dotenv: image-digest.env }
    paths: [ image-digest.env ]
    when: always
    expire_in: 1 week
