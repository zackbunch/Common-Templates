# .gitlab/build.gitlab-ci.yml
.build-dind:
  image: docker:24.0.5
  services: [ "docker:24.0.5-dind" ]
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""

.build-common:
  extends: .build-dind
  variables:
    PUSH_IMAGE: "false"
    RELEASE_IMAGE: "false"
    TAG_LATEST: "false"
    TAG_SUFFIX: ""
    DOCKER_CONTEXT: "."
    DOCKERFILE: "Dockerfile"
    # image tag suffixes
    DEV_TAG_SUFFIX:  "dev"
    TEST_TAG_SUFFIX: "test"
    INT_TAG_SUFFIX:  "int"
    PROD_TAG_SUFFIX: "prod"
    FEATURE_TAG_SUFFIX: "feat"
    MR_TAG_SUFFIX: "mr"
    FEATURE_PREFIX: "gmarm-"
  before_script:
    - set -euo pipefail
    - echo "Login $CI_REGISTRY as $CI_REGISTRY_USER"
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_JOB_TOKEN" "$CI_REGISTRY"
  script: |
    set -euo pipefail

    # Image path: use project path; append /APP_NAME only if provided
    if [ "${RELEASE_IMAGE}" = "true" ]; then
      IMAGE_REPO="${CI_REGISTRY_IMAGE}/releases"
    else
      IMAGE_REPO="${CI_REGISTRY_IMAGE}"
    fi
    if [ -n "${APP_NAME:-}" ]; then
      # sanitize app name
      APP_NAME="$(printf '%s' "${APP_NAME}" | tr '[:upper:] ' '[:lower:]-' | tr -cd 'a-z0-9._-')"
      [ -n "${APP_NAME}" ] || { echo "bad APP_NAME"; exit 1; }
      IMAGE_REPO="${IMAGE_REPO}/${APP_NAME}"
    fi

    # Tag value
    if [ "${RELEASE_IMAGE}" = "true" ]; then
      [ -n "${CI_COMMIT_TAG:-}" ] || { echo "RELEASE_IMAGE requires CI_COMMIT_TAG"; exit 1; }
      BASE_TAG="${CI_COMMIT_TAG}"
      # default to push on release if not already set by rules
      [ "${PUSH_IMAGE}" = "true" ] || PUSH_IMAGE="true"
    else
      BASE_TAG="${CI_COMMIT_SHORT_SHA}"
    fi

    # Suffix and sanitize
    [ "${TAG_SUFFIX}" != "latest" ] || { echo "TAG_SUFFIX cannot be 'latest'"; exit 1; }
    IMAGE_TAG="${TAG_SUFFIX:+${TAG_SUFFIX}-}${BASE_TAG}"
    IMAGE_TAG="$(printf '%s' "${IMAGE_TAG}" | tr ' /' '--' | tr -cd '[:alnum:]._-')"

    echo "---- build flags ----"
    echo "DEBUG_REASON     : ${DEBUG_REASON:-unset}"
    echo "PIPELINE_SOURCE  : ${CI_PIPELINE_SOURCE:-}"
    echo "BRANCH           : ${CI_COMMIT_BRANCH:-}"
    echo "TAG              : ${CI_COMMIT_TAG:-}"
    echo "PUSH_ON_FEATURE  : ${PUSH_ON_FEATURE:-unset}"
    echo "PUSH_IMAGE       : ${PUSH_IMAGE}"
    echo "RELEASE_IMAGE    : ${RELEASE_IMAGE}"
    echo "TAG_SUFFIX       : ${TAG_SUFFIX}"
    echo "TAG_LATEST       : ${TAG_LATEST}"
    echo "IMAGE_REPO       : ${IMAGE_REPO}"
    echo "IMAGE_TAG        : ${IMAGE_TAG}"
    echo "---------------------"

    docker build --pull -f "${DOCKERFILE}" \
      --label "org.opencontainers.image.source=${CI_PROJECT_URL:-}" \
      --label "org.opencontainers.image.revision=${CI_COMMIT_SHA:-}" \
      --label "org.opencontainers.image.created=$(date -u +%FT%TZ)" \
      --label "org.opencontainers.image.ref.name=${CI_COMMIT_REF_NAME:-}" \
      -t "${IMAGE_REPO}:${IMAGE_TAG}" "${DOCKER_CONTEXT}"

    if [ "${TAG_LATEST}" = "true" ]; then
      docker tag "${IMAGE_REPO}:${IMAGE_TAG}" "${IMAGE_REPO}:latest"
    fi

    if [ "${PUSH_IMAGE}" = "true" ]; then
      echo "Pushing ${IMAGE_REPO}:${IMAGE_TAG}"
      docker push "${IMAGE_REPO}:${IMAGE_TAG}"
      if [ "${TAG_LATEST}" = "true" ]; then
        docker push "${IMAGE_REPO}:latest"
      fi
      DIGEST="$(docker inspect --format='{{index .RepoDigests 0}}' "${IMAGE_REPO}:${IMAGE_TAG}" || true)"
    else
      echo "Skipping push (PUSH_IMAGE=false)"
      DIGEST=""
    fi

    {
      echo "IMAGE_ENV_PATH=${IMAGE_REPO}"
      echo "IMAGE_TAG=${IMAGE_TAG}"
      echo "IMAGE_REF=${DIGEST:-skipped}"
      echo "IMAGE_DIGEST=${DIGEST#*@sha256:}"
    } > image-digest.env
  artifacts:
    reports: { dotenv: image-digest.env }
    paths: [ image-digest.env ]
    when: always
    expire_in: 1 week



.build_image_template:
  extends: .build-dind
  variables:
    # Overridables
    APP_NAME: ""
    DOCKER_CONTEXT: "."
    DOCKERFILE: "Dockerfile"     # default to Dockerfile

    # Push policy
    PUSH_IMAGE: "false"          # auto-true for tags/env branches if you set AUTO_PUSH=true
    AUTO_PUSH: "true"            # enable default push for tags/dev/test/int/prod
    PUSH_ON_FEATURE: "false"     # allow feature branch pushes

    # Suffix presets
    FEATURE_PREFIX: "gmarm-"
    DEV_TAG_SUFFIX: "dev"
    TEST_TAG_SUFFIX: "test"
    INT_TAG_SUFFIX:  "int"
    PROD_TAG_SUFFIX: "prod"
    FEATURE_TAG_SUFFIX: "feat"
    MR_TAG_SUFFIX: "mr"

    # Latest tag behavior
    TAG_LATEST: "false"          # weâ€™ll also set true for prod or tag pipelines

  script:
    - set -euo pipefail

    # ---------- Normalize inputs (CI-only) ----------
    - 'DOCKERFILE="${DOCKERFILE:-Dockerfile}"'
    - 'DOCKER_CONTEXT="${DOCKER_CONTEXT:-.}"'
    - 'SRC_BRANCH="${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME:-${CI_COMMIT_BRANCH:-}}"'  # MR-safe

    # ---------- Repo path ----------
    - |
      if [[ -n "${APP_NAME:-}" ]]; then
        APP_NAME="$(printf '%s' "${APP_NAME}" | tr '[:upper:] ' '[:lower:]-' | tr -cd 'a-z0-9._-')"
        [[ -n "${APP_NAME}" ]] || { echo "bad APP_NAME"; exit 1; }
      fi
      if [[ -n "${CI_COMMIT_TAG:-}" ]]; then
        IMAGE_REPO="${CI_REGISTRY_IMAGE}/releases${APP_NAME:+/${APP_NAME}}"
      else
        IMAGE_REPO="${CI_REGISTRY_IMAGE}${APP_NAME:+/${APP_NAME}}"
      fi

    # ---------- Base tag ----------
    - |
      if [[ -n "${CI_COMMIT_TAG:-}" ]]; then
        BASE_TAG="${CI_COMMIT_TAG}"
        IS_TAG_PIPE="1"
      else
        BASE_TAG="${CI_COMMIT_SHORT_SHA:-dev}"
        IS_TAG_PIPE=""
      fi

    # ---------- Auto suffix (overridable by TAG_SUFFIX) ----------
    - |
      case "${CI_PIPELINE_SOURCE:-}:${SRC_BRANCH:-}" in
        merge_request_event:*) TAG_SUFFIX="${TAG_SUFFIX:-${MR_TAG_SUFFIX}}" ;;
        *:dev)                 TAG_SUFFIX="${TAG_SUFFIX:-${DEV_TAG_SUFFIX}}" ;;
        *:test)                TAG_SUFFIX="${TAG_SUFFIX:-${TEST_TAG_SUFFIX}}" ;;
        *:int)                 TAG_SUFFIX="${TAG_SUFFIX:-${INT_TAG_SUFFIX}}" ;;
        *:prod)                TAG_SUFFIX="${TAG_SUFFIX:-${PROD_TAG_SUFFIX}}"; TAG_LATEST="${TAG_LATEST:-true}" ;;
        *:${FEATURE_PREFIX}*)  TAG_SUFFIX="${TAG_SUFFIX:-${FEATURE_TAG_SUFFIX}}" ;;
        *) : ;;
      esac
      [[ "${TAG_SUFFIX:-}" != "latest" ]] || { echo "TAG_SUFFIX cannot be 'latest'"; exit 1; }
      IMAGE_TAG="${TAG_SUFFIX:+${TAG_SUFFIX}-}${BASE_TAG}"
      IMAGE_TAG="$(printf '%s' "${IMAGE_TAG}" | tr ' /' '--' | tr -cd '[:alnum:]._-')"

    # ---------- Auto push (CI-only logic) ----------
    - |
      if [[ "${AUTO_PUSH}" == "true" && "${PUSH_IMAGE}" != "true" ]]; then
        case "${SRC_BRANCH:-}" in
          dev|test|int|prod) PUSH_IMAGE="true" ;;
          *)
            if [[ -n "${IS_TAG_PIPE}" ]]; then
              PUSH_IMAGE="true"
            elif [[ "${PUSH_ON_FEATURE}" == "true" && "${SRC_BRANCH:-}" == ${FEATURE_PREFIX}* ]]; then
              PUSH_IMAGE="true"
            else
              PUSH_IMAGE="false"
            fi
          ;;
        esac
      fi

    # ---------- Build ----------
    - |
      echo "Building ${IMAGE_REPO}:${IMAGE_TAG} using ${DOCKERFILE} (context: ${DOCKER_CONTEXT})"
      docker build --pull \
        -f "${DOCKERFILE}" \
        --label "org.opencontainers.image.source=${CI_PROJECT_URL:-}" \
        --label "org.opencontainers.image.revision=${CI_COMMIT_SHA:-}" \
        --label "org.opencontainers.image.created=$(date -u +%FT%TZ)" \
        --label "org.opencontainers.image.ref.name=${CI_COMMIT_REF_NAME:-}" \
        --build-arg TOKEN_TYPE="JOB" \
        --build-arg GITLAB_TOKEN="${CI_JOB_TOKEN}" \
        --build-arg CI_PROJECT_ID="${CI_PROJECT_ID}" \
        --build-arg CI_SERVER_URL="${CI_SERVER_URL}" \
        -t "${IMAGE_REPO}:${IMAGE_TAG}" \
        "${DOCKER_CONTEXT}"

    # Tag latest for prod branch or tag pipeline, or if explicitly requested
    - |
      if [[ "${TAG_LATEST}" == "true" || -n "${IS_TAG_PIPE:-}" ]]; then
        docker tag "${IMAGE_REPO}:${IMAGE_TAG}" "${IMAGE_REPO}:latest"
      fi

    # ---------- Push (CI registry only) ----------
    - |
      if [[ "${PUSH_IMAGE}" == "true" ]]; then
        echo "Login ${CI_REGISTRY} as ${CI_REGISTRY_USER}"
        docker login -u "${CI_REGISTRY_USER}" -p "${CI_JOB_TOKEN}" "${CI_REGISTRY}"
        echo "Pushing ${IMAGE_REPO}:${IMAGE_TAG}"
        docker push "${IMAGE_REPO}:${IMAGE_TAG}"
        if [[ "${TAG_LATEST}" == "true" || -n "${IS_TAG_PIPE:-}" ]]; then
          docker push "${IMAGE_REPO}:latest"
        fi
        DIGEST="$(docker inspect --format='{{index .RepoDigests 0}}' "${IMAGE_REPO}:${IMAGE_TAG}" || true)"
      else
        DIGEST=""
      fi

    # ---------- Dotenv for downstream jobs ----------
    - |
      {
        echo "IMAGE_ENV_PATH=${IMAGE_REPO}"
        echo "IMAGE_TAG=${IMAGE_TAG}"
        echo "IMAGE_REF=${DIGEST:-skipped}"
        echo "IMAGE_DIGEST=${DIGEST#*@sha256:}"
      } > image-digest.env

  artifacts:
    reports:
      dotenv: image-digest.env
    paths:
      - image-digest.env
    when: always
    expire_in: 1 week
