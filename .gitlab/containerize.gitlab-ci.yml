variables:
  DOCKER_TLS_CERTDIR: ""
  DOCKER_HOST: "tcp://docker:2375"
  DOCKER_PRUNE: "false"        # set true on MR/feature if you want cleanup
  PUSH_FEATURE_BRANCH: "false" # opt-in to push on non-default, non-MR

.before_docker: &before_docker
  - set -euo pipefail
  - echo "$CI_JOB_TOKEN" | docker login -u gitlab-ci-token --password-stdin "$CI_REGISTRY"

.compute_meta: &compute_meta |
  set -euo pipefail

  # Canonical repo path (single registry path across all flows)
  BASE_IMAGE_PATH="$CI_REGISTRY_IMAGE${APP_NAME:+/$APP_NAME}"

  # Tag strategy
  if [[ -n "${CI_COMMIT_TAG:-}" ]]; then
    IMAGE_TAG="${CI_COMMIT_TAG}"
  elif [[ -n "${CI_MERGE_REQUEST_IID:-}" ]]; then
    IMAGE_TAG="mr-${CI_MERGE_REQUEST_IID}-${CI_COMMIT_SHORT_SHA}"
  else
    IMAGE_TAG="${CI_COMMIT_SHORT_SHA}"
  fi

  DOCKER_IMAGE_REPO="${BASE_IMAGE_PATH}"
  DOCKER_IMAGE_WITH_TAG="${BASE_IMAGE_PATH}:${IMAGE_TAG}"
  DOCKER_IMAGE_LATEST="${BASE_IMAGE_PATH}:latest"

build:docker:
  image: docker:cli
  stage: build
  services: [docker:dind]
  resource_group: "$CI_PROJECT_PATH:$CI_COMMIT_REF_SLUG"
  before_script:
    - *before_docker
    - *compute_meta
  script:
    - |
      set -euo pipefail

      # Optional cache-from previous image (best-effort)
      if docker pull "${DOCKER_IMAGE_LATEST}" >/dev/null 2>&1; then
        CACHE_FROM="--cache-from=${DOCKER_IMAGE_LATEST}"
      else
        CACHE_FROM=""
      fi

      docker build --pull ${CACHE_FROM} \
        --label org.opencontainers.image.source="${CI_PROJECT_URL}" \
        --label org.opencontainers.image.revision="${CI_COMMIT_SHA}" \
        --label org.opencontainers.image.created="$(date -u +%FT%TZ)" \
        -t "${DOCKER_IMAGE_WITH_TAG}" .

      IMAGE_PUSHED="false"
      DIGEST=""
      IMAGE_REF=""

      # Decide if we push
      if [[ "${CI_COMMIT_BRANCH:-}" = "${CI_DEFAULT_BRANCH}" \
            || -n "${CI_COMMIT_TAG:-}" \
            || "${CI_PIPELINE_SOURCE:-}" = "merge_request_event" \
            || "${PUSH_FEATURE_BRANCH:-}" = "true" ]]; then
        IMAGE_PUSHED="true"
        echo "Pushing ${DOCKER_IMAGE_WITH_TAG}"
        # Flaky networks, give it a couple retries
        for i in 1 2 3; do docker push "${DOCKER_IMAGE_WITH_TAG}" && break || sleep $((i*2)); done

        # Ensure digest is populated (pull to sync RepoDigests if needed)
        docker pull "${DOCKER_IMAGE_WITH_TAG}" >/dev/null 2>&1 || true
        DIGEST="$(docker inspect --format='{{index .RepoDigests 0}}' "${DOCKER_IMAGE_WITH_TAG}" | cut -d'@' -f2 || true)"
        if [[ -n "${DIGEST}" ]]; then
          IMAGE_REF="${DOCKER_IMAGE_REPO}@${DIGEST}"
        fi

        # Push 'latest' only for default branch (optional: include tags if you like)
        if [[ "${CI_COMMIT_BRANCH:-}" = "${CI_DEFAULT_BRANCH}" ]]; then
          docker tag "${DOCKER_IMAGE_WITH_TAG}" "${DOCKER_IMAGE_LATEST}"
          for i in 1 2 3; do docker push "${DOCKER_IMAGE_LATEST}" && break || sleep $((i*2)); done
        fi
      else
        echo "Skipping push (not default/tag/MR and PUSH_FEATURE_BRANCH!=true)."
      fi

      # Emit dotenv for downstream consumers
      {
        echo "DOCKER_IMAGE_PUSHED=${IMAGE_PUSHED}"
        echo "DOCKER_IMAGE_REPO=${DOCKER_IMAGE_REPO}"
        echo "DOCKER_IMAGE_TAG=${IMAGE_TAG}"
        echo "DOCKER_IMAGE_WITH_TAG=${DOCKER_IMAGE_WITH_TAG}"
        echo "DOCKER_IMAGE_DIGEST=${DIGEST}"
        echo "IMAGE_REF=${IMAGE_REF}"
        echo "CS_IMAGE=${IMAGE_REF}"   # scanner-friendly
      } > docker.env

  after_script:
    - |
      if [[ "${DOCKER_PRUNE}" = "true" ]]; then
        docker system prune -af || true
        docker logout "$CI_REGISTRY" || true
      else
        docker logout "$CI_REGISTRY" || true
      fi

  artifacts:
    reports: { dotenv: docker.env }
    paths: [docker.env]
    expire_in: 1 week

  rules:
    # Merge requests: run always if Dockerfile exists
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      exists: [Dockerfile]
      when: on_success

    # Tags: run if Dockerfile exists
    - if: $CI_COMMIT_TAG
      exists: [Dockerfile]
      when: on_success

    # Branch pushes (including default): run if Dockerfile exists
    - if: $CI_COMMIT_BRANCH
      exists: [Dockerfile]
      when: on_success

    # Fallback
    - when: never