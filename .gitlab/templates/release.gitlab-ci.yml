gitlab_release:
  stage: release
  rules: !reference [.rule:push-to-dev-branch, rules]
  image:
    name: $CI_TEMPLATE_REGISTRY_HOST/gitlab-org/release-cli:latest
    entrypoint: [""]
  variables:
    RELEASE_NOTES_FILE: "release_notes.md"
  before_script:
    - set -euo pipefail

    # Only proceed for merge commits (prevents accidental releases on plain pushes)
    - |
      PARENTS="$(git rev-list --parents -n 1 "$CI_COMMIT_SHA" | wc -w | tr -d ' ')"
      if [ "$PARENTS" -lt 2 ]; then
        echo "Not a merge commit; skipping release."
        exit 0
      fi

    # Require SPRINT
    - |
      if [ -z "${SPRINT:-}" ]; then
        echo "ERROR: Missing required variable SPRINT (set at pipeline/trigger)."
        exit 1
      fi

    # VERSION must exist and be semver-like (no 'v' prefix in your scheme)
    - |
      test -f VERSION || { echo "ERROR: VERSION file missing"; exit 1; }
      VERSION_FILE="$(tr -d ' \t\r\n' < VERSION)"
      test -n "$VERSION_FILE" || { echo "ERROR: VERSION file is empty"; exit 1; }
      echo "$VERSION_FILE" | grep -Eq '^[0-9]+\.[0-9]+\.[0-9]+([-.][0-9A-Za-z.]+)?$' \
        || { echo "ERROR: VERSION not semver-like: '$VERSION_FILE'"; exit 1; }

    # Build notes from CHANGELOG (fallback to a simple line)
    - |
      if [ -f CHANGELOG.md ]; then
        awk 'BEGIN{p=0} /^## /{if(p) exit; p=1} p' CHANGELOG.md > "$RELEASE_NOTES_FILE" || true
      fi
      [ -s "$RELEASE_NOTES_FILE" ] || printf "Created by CI for %s (%s)\n" "$CI_COMMIT_BRANCH" "$CI_COMMIT_SHA" > "$RELEASE_NOTES_FILE"

    # Compose release name
    - export RELEASE_NAME="Version ${VERSION_FILE} Release - Sprint ${SPRINT}"

  script:
    # Update if release exists; else create (creating tag ${VERSION_FILE} at this commit)
    - |
      if release-cli get --tag-name "$VERSION_FILE" >/dev/null 2>&1; then
        echo "Updating release $VERSION_FILE"
        release-cli update \
          --tag-name "$VERSION_FILE" \
          --name "$RELEASE_NAME" \
          --description "$RELEASE_NOTES_FILE"
      else
        echo "Creating release and tag $VERSION_FILE at $CI_COMMIT_SHA"
        release-cli create \
          --tag-name "$VERSION_FILE" \
          --ref "$CI_COMMIT_SHA" \
          --name "$RELEASE_NAME" \
          --description "$RELEASE_NOTES_FILE"
      fi
  retry:
    max: 1
    when: [api_failure, runner_system_failure, unknown_failure]
  allow_failure: false