# .gitlab/secrets.gitlab-ci.yml
# include:
#   - local: '.gitlab/job-rules.gitlab-ci.yml'

# Hidden base: reuse in other jobs if needed
.secret-analyzer:
  stage: scan
  interruptible: true
  # Pin â€” avoid :latest in security jobs
  image: "$CI_TEMPLATE_REGISTRY_HOST/gitlab-org/security-products/analyzers/secrets:6"
  variables:
    # Shallow for MR speed; deep scan is in the scheduled job below
    GIT_DEPTH: "25"
    GIT_SUBMODULE_STRATEGY: "none"
    SECRET_DETECTION_EXCLUDED_PATHS: "vendor/**,node_modules/**,dist/**,build/**,*.png,*.jpg,*.pdf,*.zip"
    SECRET_DETECTION_IMAGE_SUFFIX: ""
    SECRETS_ANALYZER_VERSION: "6"
    SECRET_DETECTION_HISTORIC_SCAN: "false"
    # Gate by default; downstream rules can relax this
    SECURE_ANALYZERS_FORCE_EXIT_CODE: "1"
  timeout: 15m
  script:
    - /analyzer run
  artifacts:
    when: always
    expire_in: 1 week
    reports:
      secret_detection: gl-secret-detection-report.json
    paths:
      - gl-secret-detection-report.json
  allow_failure: false  # flip to true if you want soft-fail

# ---- MR gate (fast, shallow) ----
scan:secrets:
  extends: [".secret-analyzer"]
  rules: !reference [.rule:secret_detection, rules]

# ---- Scheduled deep scan (slow, full history, non-blocking) ----
# scan:secrets:historic:
#   extends: [".secret-analyzer"]
#   variables:
#     GIT_DEPTH: "0"                          # full history
#     SECRET_DETECTION_HISTORIC_SCAN: "true"
#     SECURE_ANALYZERS_FORCE_EXIT_CODE: "0"   # report-only; alert out-of-band if needed
#   allow_failure: true
#   rules: !reference [.rule:scheduled-nightly, rules]

# # ---- Optional: fail-hard only on protected-like branches ----
# scan:secrets:protected:
#   extends: [".secret-analyzer"]
#   variables:
#     SECURE_ANALYZERS_FORCE_EXIT_CODE: "1"
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH =~ /^(main|master|release\/.*)$/'
#       when: on_success